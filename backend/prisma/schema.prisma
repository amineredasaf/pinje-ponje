// Pinjponj is a game where you can play with your friends and have fun
// this is the schema of the database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// starting building the final schema with secure logic
model User {
  id              Int     @id @unique @default(autoincrement())
  intraid         Int     @unique
  Hashpassword    String
  email           String  @unique
  twofactor       Boolean @default(false)
  twoFactorSecret String?
  GameOfP1        Game[]   @relation("P1")
  GameOfP2        Game[]   @relation("P2")
  profile         Profile @relation(fields: [id], references: [userid])
}

// # The Reason why i'm using a profile model is because i want to split the user and the profile
// # so we can send only the public data to the client and keep the private data in the server such as the password and the email
model Profile {
  id          Int      @id @unique @default(autoincrement())
  username    String   @unique // # at the creation the username and login came from intra + the user can change it
  login       String   @unique // # at the creation the username and login came from intra
  // campus      String // # at the creation the campus came from intra
  avatar      String? // # at the creation the user has a default avatar and can change it
  phonenumber String?
  status      Status   @default(ONLINE) // # enum [in game, online, offline]
  CurrentMap  String // # the mapid is the id of the map the user is playing in and an array of unlocaked maps
  UnlockedMap String[] // # the mapid is the id of the map the user is playing in and an array of unlocaked maps  
  GamesLose   Int?
  GameDraw    Int?
  GamePlayed  Int?

  Rank      String? // # player rank from our ranking system
  level     Int? // # the level is the sum of all the xp the user has
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
  userid    Int      @unique
}

model Game {
  id        Int        @id @unique @default(autoincrement())
  Player1   User       @relation("P1" ,fields: [player1id], references: [id])
  Player2   User       @relation("P2" ,fields: [player2id], references: [id])
  player1id Int        @unique
  player2id Int        @unique
  p1Score   Int        @default(0)
  p2Score   Int        @default(0)
  p1Result  gameResult @default(DRAW)
  p2Result  gameResult @default(DRAW)
  status    gameStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum gameResult {
  WIN
  LOSE
  DRAW
}

// # enum [in game, online, offline]
enum Status {
  INGAME
  ONLINE
  OFFLINE
}

enum gameStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

// # enum [bronze, silver, gold, platinum, diamond, master, grandmaster, challenger]
enum Rank {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  MASTER
  GRANDMASTER
  CHALLENGER
}

// # thinking about Self Reations Disvanteges
// # https://www.prisma.io/docs/concepts/components/prisma-schema/relations#self-relations
// # thinking about the best practice to send the data to the client
// # thinking about the best structure to store the data
// # thinking about the best way to query the data
// # thinking about the best way to update the data
// # thinking about the best way to delete the data
// # thinking about the best way to create the data
// # thinking about the best way to handle the data
// # thinking about the best way to split the user and the profile
