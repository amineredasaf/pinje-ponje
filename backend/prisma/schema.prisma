 // Pinjponj is a game where you can play with your friends and have fun
// this is the schema of the database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int     @id @unique @default(autoincrement())
  password    		String?
  email           String  @unique
  intraid         Int?
  googleId        String?
  twoFactor       Boolean @default(false)
  twoFactorSecret String?
	status          Status  @default(ONLINE)
  Rooms    				RoomMembership[]
  messages 				ChatMessage[]
  profile  				Profile?
  players 				Player[]
  winRate         Float			@default(0)
  accuracy        Float     @default(0)
  consitency      Float     @default(0)
  reflex          Float     @default(0)
	createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
	notificationsSent		Notification[] @relation("sender")
	notificationsReceived	Notification[] @relation("receiver")
}

model Profile {
  id             Int       @id @unique @default(autoincrement())
  username       String    @unique
  bio            String?   @default("I am a new player") @db.VarChar(255)
  avatar         String?
  Friends        Int[]
  blockedBy      Profile[] @relation("UserBlocked")
  blocking       Profile[] @relation("UserBlocked")
  pendingRequest Profile[] @relation("UserPending")
  sentRequest    Profile[] @relation("UserPending")
  user           User      @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid         Int       @unique
	experience		 Int			 @default(0)
	gamePoints		 Int			 @default(0)
	rank					 Rank			 @default(UNRANKED)
	level					 Int			 @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
}

model Player {
  id          Int      @id @unique @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  status      playerStatus
  score       Int      @default(0)
  gameId      Int
  accuracy    Float     @default(0)
  consitency  Float     @default(0)
  reflex      Float     @default(0)
  createdAt   DateTime  @default(now())

  @@unique([userId, gameId])
}

model Game {
	id					Int       	@id @unique @default(autoincrement())
	mode				GameMode
  players     Player[]
	createdAt		DateTime		@default(now())
}

// add level and rank and xp fake data and store achievements in the database and rankes 

model RoomMembership {
  id       Int      @id @default(autoincrement())
  role     ChatRole
  state    MemberState @default(ACTIVE)
  unmuteTime DateTime?
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  room     ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   Int
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  content   String
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}

model ChatRoom {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  password    String?
  roomType    RoomType         @default(DM)
  members     RoomMembership[]
  messages    ChatMessage[]
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
}

model Notification {
	id					Int								@id @default(autoincrement())
	sender			User							@relation("sender", fields: [senderid], references: [id])
	senderid		Int
	receiver		User							@relation("receiver", fields: [receiverid], references: [id], onDelete: Cascade)
	receiverid	Int
	type				NotificationType
	createdAt		DateTime					@default(now())
	updatedAt		DateTime					@default(now()) @updatedAt
	read				Boolean						@default(false)
}

enum NotificationType {
	FRIEND_REQUEST
	FRIEND_REQUEST_ACCEPTED
	GAME_INVITE
	GAME_INVITE_REJECTED
	GROUPE_CHAT_INVITE
}

enum RoomType {
  PUBLIC
  PROTECTED
  PRIVATE
  DM
}

enum MemberState {
  ACTIVE
  MUTED
  BANNED
}

enum ChatRole {
  MEMBER
  ADMIN
  OWNER
}

enum GameResult {
  WIN
  LOSE
  DRAW
}

// # enum [in game, online, offline]
enum Status {
  INGAME
  ONLINE
  OFFLINE
  INQUEUE
	SPECTATING
}

enum GameMode {
	VSONE
	VSBOT
	VSALL
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum playerStatus {
  WINNER
  LOSER
}

// # enum [bronze, silver, gold, platinum, diamond, master, grandmaster, challenger]
enum Rank {
  UNRANKED
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  MASTER
  GRANDMASTER
  CHALLENGER
}
